# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oJwXShOwKv96dVnmBqOigS9PjkVEWhpT
"""

# app.py
import streamlit as st
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import cv2
import matplotlib.pyplot as plt

# -------------------------------
# Load Model
# -------------------------------
@st.cache_resource
def load_ai_model(model_path):
    model = load_model(model_path)
    return model

model_path = "poster_ai_human_detector_model.h5"  # ganti sesuai path modelmu
model = load_ai_model(model_path)

# -------------------------------
# Fungsi Prediksi
# -------------------------------
def preprocess_image(img, target_size=(224, 224)):
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = cv2.resize(img, target_size)
    img = img.astype('float32') / 255.0
    img = np.expand_dims(img, axis=0)
    return img

def predict_image(model, img):
    processed_img = preprocess_image(img)
    pred = model.predict(processed_img)[0]
    # jika 2 output: [human, AI]
    human_percent = pred[0] * 100
    ai_percent = pred[1] * 100
    predicted_class = "Human" if human_percent > ai_percent else "AI"
    return predicted_class, human_percent, ai_percent

# -------------------------------
# Fungsi Heatmap (Grad-CAM)
# -------------------------------
def get_gradcam_heatmap(model, img_array, last_conv_layer_name="conv5_block3_out"):
    import tensorflow as tf
    grad_model = tf.keras.models.Model(
        [model.inputs], [model.get_layer(last_conv_layer_name).output, model.output]
    )
    with tf.GradientTape() as tape:
        conv_outputs, predictions = grad_model(img_array)
        pred_index = tf.argmax(predictions[0])
        loss = predictions[:, pred_index]

    grads = tape.gradient(loss, conv_outputs)
    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))
    conv_outputs = conv_outputs[0]
    heatmap = conv_outputs @ pooled_grads[..., tf.newaxis]
    heatmap = tf.squeeze(heatmap)
    heatmap = np.maximum(heatmap, 0) / np.max(heatmap)
    heatmap = cv2.resize(heatmap.numpy(), (img_array.shape[2], img_array.shape[1]))
    return heatmap

def overlay_heatmap(img, heatmap, alpha=0.4, colormap=cv2.COLORMAP_JET):
    heatmap = np.uint8(255 * heatmap)
    heatmap_color = cv2.applyColorMap(heatmap, colormap)
    overlayed_img = cv2.addWeighted(img, 1-alpha, heatmap_color, alpha, 0)
    return overlayed_img

# -------------------------------
# Streamlit UI
# -------------------------------
st.title("Poster AI vs Human Detector")
st.write("Unggah poster untuk mendeteksi apakah dibuat oleh AI atau manusia.")

uploaded_file = st.file_uploader("Pilih gambar poster", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    img = cv2.imdecode(file_bytes, 1)
    st.image(cv2.cvtColor(img, cv2.COLOR_BGR2RGB), caption="Gambar Unggahan", use_column_width=True)

    predicted_class, human_percent, ai_percent = predict_image(model, img)
    st.markdown(f"**Prediksi:** {predicted_class}")
    st.markdown(f"Human: {human_percent:.2f}% | AI: {ai_percent:.2f}%")

    # Tampilkan Grad-CAM jika model CNN
    try:
        img_array = preprocess_image(img)
        heatmap = get_gradcam_heatmap(model, img_array)
        overlay_img = overlay_heatmap(cv2.cvtColor(img, cv2.COLOR_BGR2RGB), heatmap)
        st.image(overlay_img, caption="Grad-CAM Overlay", use_column_width=True)
    except Exception as e:
        st.write("Heatmap tidak tersedia untuk model ini atau terjadi error:", e)

